{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const StockSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: [{}]\n  },\n  reducers: {\n    getvalue: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nconst _StockSlice$actions = StockSlice.actions,\n      increment = _StockSlice$actions.increment,\n      decrement = _StockSlice$actions.decrement,\n      incrementByAmount = _StockSlice$actions.incrementByAmount;\nexport { increment, decrement, incrementByAmount };\nexport default StockSlice.reducer;","map":{"version":3,"sources":["C:\\React Devs\\Star Note interpol T\\app\\src\\app\\Redux\\Stock\\StockSlice.js"],"names":["createSlice","StockSlice","name","initialState","value","reducers","getvalue","state","decrement","incrementByAmount","action","payload","actions","increment","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,UAAU,GAAGD,WAAW,CAAC;AACpCE,EAAAA,IAAI,EAAE,SAD8B;AAEpCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,CAAC,EAAD;AADK,GAFsB;AAKpCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAGC,KAAD,IAAW;AACnB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACD,KAPO;AAQRI,IAAAA,SAAS,EAAGD,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACD,KAVO;AAWRK,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACpCH,MAAAA,KAAK,CAACH,KAAN,IAAeM,MAAM,CAACC,OAAtB;AACD;AAbO;AAL0B,CAAD,CAA9B,C,CAsBP;;4BAC2DV,UAAU,CAACW,O;MAAvDC,S,uBAAAA,S;MAAWL,S,uBAAAA,S;MAAWC,iB,uBAAAA,iB;;AAErC,eAAeR,UAAU,CAACa,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const StockSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: [{}],\r\n  },\r\n  reducers: {\r\n    getvalue: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = StockSlice.actions\r\n\r\nexport default StockSlice.reducer"]},"metadata":{},"sourceType":"module"}