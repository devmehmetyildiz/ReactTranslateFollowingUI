{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const StockSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: [{\n      alışfiyat: 0,\n      birim: \"SAYFA\",\n      id: 1,\n      kdv: \"%40\",\n      miktar: 0,\n      satışfiyat: 140,\n      stokadı: \"İNGİLİZCE\",\n      stokkod: \"Lang1\",\n      İskonto: 0\n    }]\n  },\n  reducers: {\n    getvalue: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value = 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nconst _StockSlice$actions = StockSlice.actions,\n      increment = _StockSlice$actions.increment,\n      decrement = _StockSlice$actions.decrement,\n      incrementByAmount = _StockSlice$actions.incrementByAmount;\nexport { increment, decrement, incrementByAmount };\nexport default StockSlice.reducer;","map":{"version":3,"sources":["C:\\React Devs\\Star Note interpol T\\app\\src\\app\\Redux\\Stock\\StockSlice.js"],"names":["createSlice","StockSlice","name","initialState","value","alışfiyat","birim","id","kdv","miktar","satışfiyat","stokadı","stokkod","İskonto","reducers","getvalue","state","decrement","incrementByAmount","action","payload","actions","increment","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,UAAU,GAAGD,WAAW,CAAC;AACpCE,EAAAA,IAAI,EAAE,SAD8B;AAEpCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,SAAS,EAAE,CAAb;AACNC,MAAAA,KAAK,EAAE,OADD;AAENC,MAAAA,EAAE,EAAE,CAFE;AAGNC,MAAAA,GAAG,EAAE,KAHC;AAINC,MAAAA,MAAM,EAAE,CAJF;AAKNC,MAAAA,UAAU,EAAE,GALN;AAMNC,MAAAA,OAAO,EAAE,WANH;AAONC,MAAAA,OAAO,EAAE,OAPH;AAQNC,MAAAA,OAAO,EAAE;AARH,KAAD;AADK,GAFsB;AAapCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAGC,KAAD,IAAW;AACnB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACZ,KAAN,GAAc,CAAd;AACD,KAPO;AAQRa,IAAAA,SAAS,EAAGD,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACZ,KAAN,IAAe,CAAf;AACD,KAVO;AAWRc,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACpCH,MAAAA,KAAK,CAACZ,KAAN,IAAee,MAAM,CAACC,OAAtB;AACD;AAbO;AAb0B,CAAD,CAA9B,C,CA8BP;;4BAC2DnB,UAAU,CAACoB,O;MAAvDC,S,uBAAAA,S;MAAWL,S,uBAAAA,S;MAAWC,iB,uBAAAA,iB;;AAErC,eAAejB,UAAU,CAACsB,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const StockSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: [{ alışfiyat: 0,\r\n      birim: \"SAYFA\",\r\n      id: 1,\r\n      kdv: \"%40\",\r\n      miktar: 0,\r\n      satışfiyat: 140,\r\n      stokadı: \"İNGİLİZCE\",\r\n      stokkod: \"Lang1\",\r\n      İskonto: 0}],\r\n  },\r\n  reducers: {\r\n    getvalue: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value = 1\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = StockSlice.actions\r\n\r\nexport default StockSlice.reducer"]},"metadata":{},"sourceType":"module"}